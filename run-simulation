#!/usr/bin/env python

import argparse as argparse
import math as math
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import numpy.random

############################################################
#
#              Default Simulation Parameters
#
############################################################
#
# Default Initial Population
#
# The default initial population of the environment in the
# simulation.
#
# This is set to 250,000 per the initial conditions set
# forth in the project instructions.
#
DEFAULT_INITIAL_POPULATION = 250000
#
# Default Simulation Iterations
#
# The default number of simulation iterations to carry out.
#
DEFAULT_SIMULATION_ITERATIONS = 72
#
# Default Target Population Level
#
# The goal population level of the simulation scenario.
#
# This is set to 85,000 as per the final project parameters.
#
DEFAULT_TARGET_POPULATION_LEVEL = 85000
#
# Default Target Population Level
#
# The default goal population level of the simulation
# scenario.
#
# This is set to 275,000 as a rough estimate of the Canada
# goose population carrying capacity of New York State.
#
DEFAULT_CARRYING_CAPACITY = 275000
#
# Default Growth Rate
#
# The default growth rate of the population. The derivation
# of this growth rate is non-trivial. See the paper for
# details.
#
DEFAULT_GROWTH_RATE = 1.00685
#
# Default Monthly Harvest Rate
#
# The default rate at which geese can be harvested. Note
# well that this is an average, and the corresponding
# standard deviation must be configured as well.
#
DEFAULT_MONTHLY_HARVEST_RATE_AVG = 16000
#
# Default Monthly Harvest Standard Deviation
#
# The standard deviation of the number of geese harvested in
# a given month.
#
DEFAULT_MONTHLY_HARVEST_RATE_STDDEV = 5000
#
# Default Maximum Harvest Rate
#
# This is the default cap on the monthly harvest rate. This
# parameter sets a hard limit on the number of geese that
# may be harvested in a given month to reflect realistic
# resource limitations.
#
DEFAULT_MONTHLY_HARVEST_CAP = 50000

############################################################
#
#                  Command-Line Arguments
#
############################################################
#
# Define an argument parser object to configure.
#
parser = argparse.ArgumentParser(
    description='Canada Goose Population Simulation')
#
# Add an argument for the number of simulation iterations to
# run.
#
parser.add_argument('--iterations',
    type=int,
    default=DEFAULT_SIMULATION_ITERATIONS,
    help='The number of simulation iterations to simulate')
#
# Add an argument for configuring the initial population
# level at time t=0.
#
parser.add_argument('--initial-population',
    type=int,
    default=DEFAULT_INITIAL_POPULATION,
    help='The initial population level')
#
# Add a carrying capacity argument.
#
parser.add_argument('--carrying-capacity',
    type=int,
    default=DEFAULT_CARRYING_CAPACITY,
    help='The environment\'s carrying capacity')
#
# Add an average monthly harvest rate argument.
#
parser.add_argument('--monthly-harvest-rate',
    type=int,
    default=DEFAULT_MONTHLY_HARVEST_RATE_AVG,
    help='The average number of geese harvested per month')
#
#
#
parser.add_argument('--monthly-harvest-limit',
    type=int,
    default=DEFAULT_MONTHLY_HARVEST_CAP,
    help='The absolute upper-limit on the amount of geese that may be harvested per month')
#
# Parse command-line arguments to initialize the simulation
# parameters.
#
args = parser.parse_args()

############################################################
#
#                  Simulation Parameters
#
############################################################
#
# Initial Population
#
# The initial population of the environment in the
# simulation.
#
initialPopulation = DEFAULT_INITIAL_POPULATION
#
# Simulation Iterations
#
# The number of simulation iterations to carry out.
#
simulationIterations = args.iterations
#
# Target Population Level
#
# The goal population level of the simulation scenario.
#
targetPopulationLevel = DEFAULT_TARGET_POPULATION_LEVEL
#
# Carrying Capacity
#
# The environmental carrying capacity. Note: This parameter
# has the strongest influence on the population growth rate
# in the canonical logistic growth model.
#
carryingCapacity = args.carrying_capacity
#
# Growth Rate
#
# The growth rate of the population.
#
growthRate = DEFAULT_GROWTH_RATE
#
# Monthly Harvest Rate
#
# The default rate at which geese can be harvested. Note
# well that this is an average, and the corresponding
# standard deviation must be configured as well.
#
averageMonthlyHarvestRate = args.monthly_harvest_rate
#
# Monthly Harvest Standard Deviation
#
# The standard deviation of the number of geese harvested in
# a given month.
#
monthlyHarvestRateStdDev = DEFAULT_MONTHLY_HARVEST_RATE_STDDEV
#
# Monthly Harvest Limit
#
# The upper limit on the number of geese that may be
# harvested.
#
monthlyHarvestRateCap = args.monthly_harvest_limit

############################################################
#
#             Simulation Iteration Variables
#
############################################################
#
# Current Population
#
# The population level after the current iteration. This
# variable is initialized to the initial population because
# we are taking into account the 0th iteration as the
# initial point.
#
currentPopulation = initialPopulation
#
# Population Level
#
# This variable holds the population level at each point in
# the simulation.
#
# It is initialized to contain only the initial population
# level.
#
populationLevel = [ currentPopulation ]
#
# Current Month
#
# The current month in the year. This global variable keeps
# track of the year, as the number of geese that can be
# harvested per month greatly depends on the number of geese
# present in the environment.
#
currentMonth = 0
#
# Maximum Population Level
#
# This variable is used to dynamically set the limits of the
# y axis.
#
maximumPopulationLevel = initialPopulation
#
# Iterations Survived
#
# This variable is used to dynamically set the limits of the
# x axis.
#
iterationsSurvived = 0

############################################################
#
#              Simulation Iteration Structure
#
############################################################
#
# GeeseHarvested
#
# This function calculates the number of geese harvested
# during the given month of the year.
#
def GeeseHarvested(currentMonth):
    global averageMonthlyHarvestRate
    global monthlyHarvestRateStdDev

    geeseHarvested = math.fabs((averageMonthlyHarvestRate / 2.0) + (math.sin((currentMonth * math.pi) / 6.0) * numpy.random.default_rng().normal(averageMonthlyHarvestRate,monthlyHarvestRateStdDev,1)[0]))

    # DEBUG: Print the number of geese harvested.
    # print(f"Geese harvested: {geeseHarvested}")

    return geeseHarvested
#
#
#
def NextPopulationLevel(previousPopulationLevel):
    global growthRate
    global carryingCapacity
    global currentMonth
    global monthlyHarvestRateCap

    # Increment the current month.
    currentMonth = (currentMonth + 1) if currentMonth < 12 else 0

    # If the previous population level was zero, skip all
    # the calculations and simply return a zero.
    if previousPopulationLevel == 0:
        return 0
    
    # Initialize the population change variable.
    populationChange = 0

    # If we are in mating season, calculate the population
    # change due to natural population growth.
    if currentMonth >= 3 and currentMonth <= 5:
        populationChange = growthRate * previousPopulationLevel * (1.0 - (previousPopulationLevel / carryingCapacity))

    # Calculate the theoretical number of geese harvested.
    theoreticalNumberOfGeeseHarvested = GeeseHarvested(currentMonth)

    # Make sure the actual number of geese harvested is realistic.
    geeseHarvested = theoreticalNumberOfGeeseHarvested if theoreticalNumberOfGeeseHarvested < monthlyHarvestRateCap else monthlyHarvestRateCap

    # Incorporate the number of harvested geese into the
    # population change.
    populationChange -= geeseHarvested

    # Calculate the net population change.
    currentPopulationLevel = previousPopulationLevel + populationChange

    # Add or subtract a random number of geese from the
    # population level to reflect the inherent uncertainty
    # in the current population count.
    populationCountError = numpy.random.default_rng().normal(0, 1000, 1)[0]

    # DEBUG: Log the population count error.
    # print(f"Population count error: {populationCountError}")

    # Incorporate the error into the population count.
    currentPopulationLevel += populationCountError

    # Normalize the population level to make sure that it
    # never falls below zero.
    currentPopulationLevel = currentPopulationLevel if currentPopulationLevel >= 0 else 0

    return currentPopulationLevel

############################################################
#
#                  Simulation Execution
#
############################################################
#
# Execute the simulation.
#
for i in range(simulationIterations):
    # Get the previous population level.
    previousPopulationLevel = populationLevel[-1]

    # If the population is not currently extinct, increment
    # the number of iterations it has survived.
    iterationsSurvived = (iterationsSurvived + 1) if previousPopulationLevel > 0 else iterationsSurvived

    # Calculate the next population level based on the
    # current simulation state.
    populationLevel += [ NextPopulationLevel(previousPopulationLevel) ]
    
    # Get the current population level.
    currentPopulationLevel = populationLevel[-1]

    # Update the maximum population level, if necessary.
    maximumPopulationLevel = currentPopulationLevel if currentPopulationLevel > maximumPopulationLevel else maximumPopulationLevel

    # DEBUG: Log the current population level.
    # print(f"{i+1} Current population level: {currentPopulationLevel}")


############################################################
#
#               Results Report Generation
#
############################################################
#
# Having carried out the simulation, generate the graph of
# the population level at each simulation iteration.
#
# Create graph objects for the axes and the figure itself.
#
fig, ax = plt.subplots()
#
# Plot the simulation results.
#
populationPlot = ax.plot([ i for i in range(simulationIterations + 1) ], populationLevel, color='blue')
#
# Plot the target population level on the graph.
#
targetPopulationLevelPlot = ax.plot([ i for i in range(simulationIterations + 1)], [ targetPopulationLevel for i in range(simulationIterations + 1) ], color='darkgreen')
#
# Plot the carrying capacity level on the graph.
#
carryingCapacityPlot = ax.plot([ i for i in range(simulationIterations + 1)], [ carryingCapacity for i in range(simulationIterations + 1) ], color='red')
#
# Set the x-axis label.
#
plt.xlabel("Month")
#
# Configure the limits of the x axis. Set the minimum to
# zero, as there are no negative iterations (we're not going
# back in time), and set the maximum to the number of
# simulation iterations plus one, to make sure we can fit
# all of the data comfortably.
#
plt.xlim(0, iterationsSurvived)
#
# Configure the limits of the y axis to span a population
# level of zero to the maximum population level needed to
# comfortably view the simulation results.
#
# TODO: Configure this parameter to dynamically adjust
# depending on the maximum populuation level reached during
# the simulation.
#
plt.ylim(0, maximumPopulationLevel + 10000)
#
# Set the y-axis label.
#
plt.ylabel("Canada Goose Population Level\n(Ten Thousands)")
#
# Only label every five tick marks of the graph.
#
def GetXTick(i, pos):
    return str(int(i)) if i % 5 == 0 else ""
#
# Only label a tick every 25,000 units, but divide by ten
# thousand so as to make the graph more readable. The y-axis
# reflects the fact that each unit represent ten thousand
# geese.
#
def GetYTick(i, pos):
    return str(int(i/10000)) if i % 25000 == 0 else ""
#
# Configure the X and Y axes of the graph.
#
ax.xaxis.set_major_locator(plt.MultipleLocator(10))
ax.xaxis.set_minor_locator(plt.MultipleLocator( 2))
ax.yaxis.set_major_locator(plt.MultipleLocator(50000))
ax.yaxis.set_minor_locator(plt.MultipleLocator(10000))
ax.grid(which='major', axis='x', linewidth=0.85, linestyle='-', color='0.55')
ax.grid(which='minor', axis='x', linewidth=0.25, linestyle='-', color='0.25')
ax.grid(which='major', axis='y', linewidth=0.85, linestyle='-', color='0.55')
ax.grid(which='minor', axis='y', linewidth=0.25, linestyle='-', color='0.25')
ax.xaxis.set_major_formatter(ticker.FuncFormatter(GetXTick))
ax.yaxis.set_major_formatter(ticker.FuncFormatter(GetYTick))
#
# Display grid lines.
#
plt.grid(True)
#
# Set the grid legend.
#
# TODO:
# plt.legend([ populationPlot, targetPopulationLevelPlot, carryingCapacityPlot ], [ 'Population Level', 'Target Population Level', 'Carring Capacity' ])
#
# Set the title of the graph.
#
plt.title("Monthly Canada Goose\nPopulation in New York State")
#
# Finally, display the graph.
#
plt.show()
