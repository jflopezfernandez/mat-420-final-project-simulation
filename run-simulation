#!/usr/bin/env python

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

############################################################
#
#              Default Simulation Parameters
#
############################################################
#
# Default Initial Population
#
# The default initial population of the environment in the
# simulation.
#
# This is set to 250,000 per the initial conditions set
# forth in the project instructions.
#
DEFAULT_INITIAL_POPULATION = 250000
#
# Default Simulation Iterations
#
# The default number of simulation iterations to carry out.
#
DEFAULT_SIMULATION_ITERATIONS = 72
#
# Default Target Population Level
#
# The goal population level of the simulation scenario.
#
# This is set to 85,000 as per the final project parameters.
#
DEFAULT_TARGET_POPULATION_LEVEL = 85000
#
# Default Target Population Level
#
# The default goal population level of the simulation
# scenario.
#
# This is set to 275,000 as a rough estimate of the Canada
# goose population carrying capacity of New York State.
#
DEFAULT_CARRYING_CAPACITY = 275000

############################################################
#
#                  Simulation Parameters
#
############################################################
#
# Initial Population
#
# The initial population of the environment in the
# simulation.
#
initialPopulation = DEFAULT_INITIAL_POPULATION
#
# Simulation Iterations
#
# The number of simulation iterations to carry out.
#
simulationIterations = DEFAULT_SIMULATION_ITERATIONS
#
# Target Population Level
#
# The goal population level of the simulation scenario.
#
targetPopulationLevel = DEFAULT_TARGET_POPULATION_LEVEL
#
# Carrying Capacity
#
# The environmental carrying capacity. Note: This parameter
# has the strongest influence on the population growth rate
# in the canonical logistic growth model.
#
carryingCapacity = DEFAULT_CARRYING_CAPACITY

############################################################
#
#             Simulation Iteration Variables
#
############################################################
#
# Current Population
#
# The population level after the current iteration. This
# variable is initialized to the initial population because
# we are taking into account the 0th iteration as the
# initial point.
#
currentPopulation = initialPopulation
#
# Population Level
#
# This variable holds the population level at each point in
# the simulation.
#
# It is initialized to contain only the initial population
# level.
#
populationLevel = [ currentPopulation ]

############################################################
#
#              Simulation Iteration Structure
#
############################################################
#
def NextPopulationLevel(previousPopulationLevel):
    return previousPopulationLevel * .997

############################################################
#
#                  Simulation Execution
#
############################################################
#
# Execute the simulation.
#
for i in range(simulationIterations):
    populationLevel += [ NextPopulationLevel(populationLevel[len(populationLevel)-1]) ]

############################################################
#
#               Results Report Generation
#
############################################################
#
# Having carried out the simulation, generate the graph of
# the population level at each simulation iteration.
#
# Create graph objects for the axes and the figure itself.
#
fig, ax = plt.subplots()
#
# Plot the simulation results.
#
populationPlot = ax.plot([ i for i in range(simulationIterations + 1) ], populationLevel, color='blue')
#
# Plot the target population level on the graph.
#
targetPopulationLevelPlot = ax.plot([ i for i in range(simulationIterations + 1)], [ targetPopulationLevel for i in range(simulationIterations + 1) ], color='darkgreen')
#
# Plot the carrying capacity level on the graph.
#
carryingCapacityPlot = ax.plot([ i for i in range(simulationIterations + 1)], [ carryingCapacity for i in range(simulationIterations + 1) ], color='red')
#
# Set the x-axis label.
#
plt.xlabel("Month")
#
# Configure the limits of the x axis. Set the minimum to
# zero, as there are no negative iterations (we're not going
# back in time), and set the maximum to the number of
# simulation iterations plus one, to make sure we can fit
# all of the data comfortably.
#
plt.xlim(0, simulationIterations)
#
# Configure the limits of the y axis to span a population
# level of zero to the maximum population level needed to
# comfortably view the simulation results.
#
# TODO: Configure this parameter to dynamically adjust
# depending on the maximum populuation level reached during
# the simulation.
#
plt.ylim(0, carryingCapacity + 10000)
#
# Set the y-axis label.
#
plt.ylabel("Canada Goose Population Level\n(Ten Thousands)")
#
# Only label every five tick marks of the graph.
#
def GetXTick(i, pos):
    return str(int(i)) if i % 5 == 0 else ""
#
# Only label a tick every 25,000 units, but divide by ten
# thousand so as to make the graph more readable. The y-axis
# reflects the fact that each unit represent ten thousand
# geese.
#
def GetYTick(i, pos):
    return str(int(i/10000)) if i % 25000 == 0 else ""
#
# Configure the X and Y axes of the graph.
#
ax.xaxis.set_major_locator(plt.MultipleLocator(10))
ax.xaxis.set_minor_locator(plt.MultipleLocator( 2))
ax.yaxis.set_major_locator(plt.MultipleLocator(50000))
ax.yaxis.set_minor_locator(plt.MultipleLocator(10000))
ax.grid(which='major', axis='x', linewidth=0.85, linestyle='-', color='0.55')
ax.grid(which='minor', axis='x', linewidth=0.25, linestyle='-', color='0.25')
ax.grid(which='major', axis='y', linewidth=0.85, linestyle='-', color='0.55')
ax.grid(which='minor', axis='y', linewidth=0.25, linestyle='-', color='0.25')
ax.xaxis.set_major_formatter(ticker.FuncFormatter(GetXTick))
ax.yaxis.set_major_formatter(ticker.FuncFormatter(GetYTick))
#
# Display grid lines.
#
plt.grid(True)
#
# Set the grid legend.
#
# TODO:
# plt.legend([ populationPlot, targetPopulationLevelPlot, carryingCapacityPlot ], [ 'Population Level', 'Target Population Level', 'Carring Capacity' ])
#
# Set the title of the graph.
#
plt.title("Monthly Canada Goose\nPopulation in New York State")
#
# Finally, display the graph.
#
plt.show()
